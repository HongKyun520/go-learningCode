// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package startup

import (
	"GoInAction/webook/internal/repository"
	"GoInAction/webook/internal/repository/cache"
	"GoInAction/webook/internal/repository/dao"
	"GoInAction/webook/internal/service"
	"GoInAction/webook/internal/web"
	"GoInAction/webook/internal/web/jwt"
	"GoInAction/webook/ioc"
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
)

// Injectors from wire.go:

// InitWebServer 初始化并构建完整的Web服务器
// 使用wire进行依赖注入,组装所有组件
// 返回配置完成的gin.Engine实例
func InitWebServer() *gin.Engine {
	cmdable := InitRedis()
	logger := InitLogger()
	handler := jwt.NewRedisJWTHandler(cmdable)
	v := ioc.InitMiddlewares(cmdable, logger, handler)
	db := InitDB()
	userDAO := dao.NewUserDAO(db)
	userCache := cache.NewUserCache(cmdable)
	userRepository := repository.NewUserRepository(userDAO, userCache)
	userService := service.NewUserService(userRepository)
	codeCache := cache.NewCodeCache(cmdable)
	codeRepository := repository.NewCodeRepository(codeCache)
	smsService := ioc.InitSmsService()
	codeService := service.NewCodeService(codeRepository, smsService)
	userHandler := web.NewUserHandler(userService, codeService)
	wechatService := InitWechatService(logger)
	oAuth2WechatHandler := web.NewOAuth2WechatHandler(wechatService, userService)
	articleDAO := dao.NewArticleGORMDAO(db)
	articleCache := cache.NewArticleRedisCache(cmdable)
	articleRepository := repository.NewCacheArticleRepository(articleDAO, articleCache, userRepository)
	articleService := service.NewArticleService(articleRepository)
	articleHandler := web.NewArticleHandler(articleService, logger)
	engine := ioc.InitWebServer(v, userHandler, oAuth2WechatHandler, articleHandler)
	return engine
}

// InitArticleHandler 初始化文章处理器
// 参数:
//   - dao: 文章数据访问对象
//
// 返回:
//   - *web.ArticleHandler: 文章处理器实例
func InitArticleHandler(dao2 dao.ArticleDAO) *web.ArticleHandler {
	cmdable := InitRedis()
	articleCache := cache.NewArticleRedisCache(cmdable)
	db := InitDB()
	userDAO := dao.NewUserDAO(db)
	userCache := cache.NewUserCache(cmdable)
	userRepository := repository.NewUserRepository(userDAO, userCache)
	articleRepository := repository.NewCacheArticleRepository(dao2, articleCache, userRepository)
	articleService := service.NewArticleService(articleRepository)
	logger := InitLogger()
	articleHandler := web.NewArticleHandler(articleService, logger)
	return articleHandler
}

// wire.go:

// thirdPartySet 定义了第三方依赖的提供者集合
// 包括:
// - Redis 客户端初始化
// - 数据库连接初始化
// - 日志组件初始化
var thirdPartySet = wire.NewSet(
	InitRedis, InitDB,
	InitLogger)

// userSvcProvider 定义了用户服务相关的提供者集合
// 包括:
// - 用户数据访问对象(DAO)
// - 用户缓存
// - 用户仓储
// - 用户服务
var userSvcProvider = wire.NewSet(dao.NewUserDAO, cache.NewUserCache, repository.NewUserRepository, service.NewUserService)

// articlSvcProvider 定义了文章服务相关的提供者集合
// 包括:
// - 文章仓储
// - 文章Redis缓存
// - 文章数据访问对象
// - 文章服务
var articlSvcProvider = wire.NewSet(repository.NewCacheArticleRepository, cache.NewArticleRedisCache, dao.NewArticleGORMDAO, service.NewArticleService)
